const canvas = document.querySelector('canvas');
const gl = canvas.getContext('webgl');

const vertexShaderSource = `
  attribute vec3 position;
  attribute vec4 color;
  varying vec4 vColor;
  void main() {
    gl_Position = vec4(position, 1);
    vColor = color;
  }
`;

const fragmentShaderSource = `
  precision mediump float;
  varying vec4 vColor;
  void main() {
    gl_FragColor = vColor;
  }
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  if (success) {
    return shader;
  }
  console.error(gl.getShaderInfoLog(shader));
  gl.deleteShader(shader);
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  const success = gl.getProgramParameter(program, gl.LINK_STATUS);
  if (success) {
    return program;
  }
  console.error(gl.getProgramInfoLog(program));
  gl.deleteProgram(program);
}

const vertices = [
  [-5, 59, 72, 0xc0/255, 0x52/255, 0x47/255, 1],
  [-9, 73, 34, 0xbe/255, 0x6a/255, 0x12/255, 1],
  [-32, 40, 39, 0x8b/255, 0x25/255, 0x1d/255, 1],
  [52, 70, 38, 0x53/255, 0x5d/255, 0x16/255, 1],
  [22, 82, 26, 0x07/255, 0x7d/255, 0x11/255, 1],
  [27, 72, 63, 0x06/255, 0x6c/255, 0x42/255, 1],
  [43, 40, -91, 0x4e/255, 0x30/255, 0xa9/255, 1],
  [27, 72, -63, 0x07/255, 0x6b/255, 0xbe/255, 1],
  [52, 70, -39, 0x59/255, 0x56/255, 0xe5/255, 1],
  [-5, 59, -72, 0xc0/255, 0x52/255, 0xb9/255, 1],
  [-17, 32, -79, 0xa4/255, 0x23/255, 0xb1/255, 1],
  [-32, 40, -39, 0x89/255, 0x25/255, 0xeb/255, 1],
  [73, 11, 0, 0x7e/255, 0x04/255, 0x00/255, 0],
  [43, 40, 91, 0x4e/255, 0x30/255, 0x57/255, 1]
];

const positionBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices.flat(Infinity).slice(0, -4)), gl.STATIC_DRAW);
const positionAttributeLocation = gl.getAttribLocation(program, 'position');
gl.enableVertexAttribArray(positionAttributeLocation);
gl.vertexAttribPointer(positionAttributeLocation, 3, gl.FLOAT, false, 0, 0);

const colorBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices.flat(Infinity).slice(-4)), gl.STATIC_DRAW);
const colorAttributeLocation = gl.getAttribLocation(program, 'color');
gl.enableVertexAttribArray(colorAttributeLocation);
gl.vertexAttribPointer(colorAttributeLocation, 4, gl.FLOAT, false, 0, 0);

const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
const program = createProgram(gl, vertexShader, fragmentShader);
gl.useProgram(program);

gl.enable(gl.DEPTH_TEST);
gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
gl.clearColor(0, 0, 0, 1);
gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
gl.drawArrays(gl.TRIANGLES, 0, vertices.length);
